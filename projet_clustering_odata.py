# -*- coding: utf-8 -*-
"""Projet_clustering_odata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K4bQqW_yz61ItUUM7qK9-Hvrs8UJU7fT
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import dendrogram, linkage , fcluster
from sklearn.mixture import GaussianMixture
from sklearn.cluster import DBSCAN
from sklearn.cluster import SpectralClustering
from sklearn.preprocessing import LabelEncoder
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.manifold import TSNE

import seaborn as sns

data=pd.read_excel("/content/donnees_environnement_capteurs.xlsx")
data.head(5)

data.info()

data.describe()

data.isna().sum()

for x in data.columns:
  if data[x].dtype==np.float64 or data[x].dtype==np.int64:
    data.fillna(data[x].mean,inplace=True)

data.isna().sum()

# FAIRE UNE COPIE DE INDEX
Index=data["INDEX"]
Index

#encoder les variables
label_encoder=LabelEncoder()

for x in data.columns:
  if data[x].dtype=='object':
    data[x]=data[x].astype(str)
    data[x]=label_encoder.fit_transform(data[x])

data

data=data.drop('INDEX',axis=1)
data

#appliquons le PCA
scaler=StandardScaler()
scaled_data=scaler.fit_transform(data)

pca=PCA(n_components=2)
pca_res=pca.fit_transform(scaled_data)

pca_dataFrame=pd.DataFrame(data=pca_res,columns=["PCA1",'PCA2'])

pca_dataFrame

plt.figure(figsize=(9,8))
plt.scatter(pca_dataFrame["PCA1"],pca_dataFrame["PCA2"],cmap="coolwarm")
plt.grid(True)
plt.show()

# on visualise la corrélation entre les variables

matrix_corr=data.corr()

sns.heatmap(matrix_corr,annot=True,cmap="coolwarm")

indices=np.where(matrix_corr == np.max(matrix_corr[matrix_corr != 1]))
indices = [(matrix_corr.index[x], matrix_corr.columns[y]) for x, y in zip(*indices) if x != y]

sorted(indices)[-1] # return le dernier élément avec >>> corr

k=2

km=KMeans(n_clusters=k)

km.fit(pca_res)
cente=km.cluster_centers_
lab=km.labels_
plt.scatter(pca_res[:,0],pca_res[:,1],c=lab,cmap='viridis',marker='o')
plt.scatter(cente[:,0],cente[:,1],cmap='coolwarm',marker='x')
for i in range(k):
    cluster_points = pca_res[lab == i]
    radius = max(np.linalg.norm(cluster_points - cente[i], axis=1))
    circle = plt.Circle(cente[i], radius, color='b', fill=False, alpha=0.3)
    plt.gca().add_patch(circle)


plt.show()

#CHA


Z = linkage(pca_res, 'ward')


plt.figure(figsize=(10, 7))
plt.title("Dendrogramme")
dendrogram(Z)
plt.show()

max_d = 20
clusters = fcluster(Z, max_d, criterion='distance')


plt.figure(figsize=(10, 7))
plt.scatter(pca_res[:, 0], pca_res[:, 1], c=clusters, cmap='viridis')
plt.title('Clusters PCA en 2D')
plt.xlabel('Première Composante Principale')
plt.ylabel('Deuxième Composante Principale')
plt.show()

# appliquer le t_SNE


tsne=TSNE(n_components=2,random_state=42)

data_tsne=tsne.fit_transform(data)

plt.figure(figsize=(9,9))

plt.scatter(data_tsne[:,0],data_tsne[:,1],cmap='viridis')

plt.grid(True)
plt.show()

kmm=KMeans(n_clusters=2)

kmm.fit_transform(data_tsne)

center=kmm.cluster_centers_
labe=kmm.labels_
plt.figure(figsize=(9,9))
plt.scatter(data_tsne[:,0],data_tsne[:,1],c=labe,cmap='viridis',marker='o')
plt.scatter(center[:,0],center[:,1],cmap='coolwarm',marker='x')
for i in range(k):
    cluster_points = data_tsne[lab == i]
    radius = max(np.linalg.norm(cluster_points - cente[i], axis=1))
    circle = plt.Circle(center[i], radius, color='b', fill=False, alpha=0.3)
    plt.gca().add_patch(circle)


plt.show()

